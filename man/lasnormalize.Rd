% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lasnormalize.r
\docType{methods}
\name{lasnormalize}
\alias{lasnormalize}
\alias{lasunnormalize}
\alias{-,LAS,RasterLayer-method}
\alias{-,LAS,function-method}
\title{Remove the topography from a point cloud}
\usage{
lasnormalize(las, algorithm)

lasunnormalize(las)

\S4method{-}{LAS,RasterLayer}(e1, e2)

\S4method{-}{LAS,`function`}(e1, e2)
}
\arguments{
\item{las}{An object of class \link[lidR:LAS-class]{LAS} or \link[lidR:LAScatalog-class]{LAScatalog}.}

\item{algorithm}{a \link[raster:raster]{RasterLayer} representing a digital terrain model (can be
computed with \link{grid_terrain}) or a spatial interpolation function. \code{lidR} have \link{tin},
\link{kriging}, \link{knnidw}.}

\item{e1}{a LAS object}

\item{e2}{\link[raster:raster]{RasterLayer} representing a digital terrain model (can be
computed with \link{grid_terrain}) or a spatial interpolation function. \code{lidR} have \link{tin},
\link{kriging}, \link{knnidw}.}
}
\value{
If the input is a \code{LAS} object the function returns nothing. The LAS object is updated
by reference. Z is now the normalized elevation, A new column 'Zref' records the former elevation
values which enable to use \code{lasunormalize} to restore original point elevations.\cr
If the input is a \code{LAScatalog} object, a new \code{LAScatalog}.
}
\description{
Subtract digital terrain model (DTM) from LiDAR point cloud to create a dataset normalized with
the ground at 0. The DTM can originate from an external file or be computed by the user. It can
also be computed on the fly. In this case the algorithm does not use rasterized data and each point
is interpolated. There is no inaccuracy due to the discretization of the terrain and the resolution
of the terrain is virtually infinite.\cr\cr
Depending on the interpolation method, the edges of the dataset can be more, or less poorly
interpolated. A buffer around the region of interest is always recommended to avoid edge
effects.\cr\cr
\code{lasunnormalize} enables restoration of the original elevation in a memory efficient way
in the case when the original elevations are recorded in the columns \code{Zref} (i.e. if
the point cloud was normalized with the package lidR).
}
\section{Working with a \code{LAScatalog}}{

This section appears in each function that supports a LAScatalog as input.\cr

In \code{lidR} when the input of a function is a \link[lidR:LAScatalog-class]{LAScatalog} the
functions uses the LAScatalog processing engine. The user can modify the engine options using
the \link[lidR:catalog_options_tools]{available options}. A careful read of the
\link[lidR:LAScatalog-class]{engine documentation} is recommended to process \code{LAScatalogs}. Each
\code{lidR} function should come with a section that document the supported engine options.\cr

\code{LAScatalog} engine supports \code{.lax} files that \emph{significantly} improve the computation
speed of spatial queries using a spatial index. Users should really take advange a \code{.lax} files
but this is not mandatory.
}

\section{Supported processing options}{

Supported processing options for a \code{LAScatalog} (in bold). For more details see the
\link[lidR:LAScatalog-class]{LAScatalog engine documentation}:
\itemize{
\item \strong{tiling_size}: How many data are loaded at once.
\item \strong{buffer*}: Mandatory to get a continuous output without edge effect. The buffer is
always removed once processed and will never be returned neither in R nor in files.
\item \strong{alignment}: Align the processed clusters
\item \strong{cores}: How many cores are used. More cores means more data loaded at once.
\item \strong{progress}: Displays a progression estimation.
\item \strong{output_files*}: Mandatory because the output is likely to be too big to be returned
 in R and needs to be written in las/laz files. Supported templates are \code{\{XLEFT\}}, \code{\{XRIGHT\}},
\code{\{YBOTTOM\}}, \code{\{YTOP\}}, \code{\{XCENTER\}}, \code{\{YCENTER\}} \code{\{ID\}} and, if tiling size equal to 0
(processing by file), \code{\{ORIGINALFILENAME\}}.
\item \strong{laz_compression}: write \code{las} or \code{laz} files
\item select: The function will write file equivalent to the original ones. Thus \code{select = "*"}
and cannot be changed.
\item \strong{filter}: Read only points of interest.
}
}

\examples{
LASfile <- system.file("extdata", "Topography.laz", package="lidR")
las = readLAS(LASfile)

plot(las)

# First option: use a RasterLayer as DTM
# =======================================================

dtm = grid_terrain(las, 1, kriging(k = 10L))
lasnormalize(las, dtm)

plot(dtm)
plot(las)

# restore original elevations
lasunnormalize(las)
plot(las)

# operator - can be used. This, is equivalent to the previous
las - dtm
plot(las)

# restore original elevations
lasunnormalize(las)

# Second option: interpolate each point (no discretization)
# =========================================================

lasnormalize(las, tin())
plot(las)

# operator - can be used. This, is equivalent to the previous
lasunnormalize(las)
las - tin()

\dontrun{
# All the following syntaxes are correct
lasnormalize(las, knnidw())
lasnormalize(las, knnidw(k = 8, p = 2))
las - knnidw()
las - knnidw(k = 8)
lasnormalize(las, kriging())
las - kriging(k = 8)
}

}
\seealso{
\link[raster:raster]{raster}
\link[lidR:grid_terrain]{grid_terrain}
}
