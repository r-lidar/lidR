% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/algo_tree_segmentation.r
\name{watershed}
\alias{watershed}
\alias{mcwatershed}
\title{Individual Tree Segmentation Algorithm}
\usage{
watershed(chm, th_tree = 2, tol = 1, ext = 1)

mcwatershed(chm, treetops, th_tree = 2, ID = "treeID")
}
\arguments{
\item{chm}{RasterLayer. Image of the canopy. Can be computed with \link{grid_canopy} or read from
an external file.}

\item{th_tree}{numeric. Threshold below which a pixel cannot be a tree. Default 2.}

\item{tol}{numeric. Tolerance see ?EBImage::watershed.}

\item{ext}{numeric. see ?EBImage::watershed.}

\item{treetops}{\code{SpatialPointsDataFrame}. Can be computed with
\link[lidR:tree_detection]{tree_detection} or read from an external shapefile.}

\item{ID}{character. If the \code{SpatialPointsDataFrame} contains an attribute with the ID for
each tree, the name of this column. This way, original IDs will be preserved. If there is no such
data trees will be numbered sequentially.}
}
\description{
This functions is made to be used in \link{lastrees}. It implements an algorithms for tree
segmentation based on a watershed or a marker controled watershed.
\itemize{
\item \strong{Simple watershed} is based on the bioconductor package \code{EBIimage}. You need to install
this package to run this method (see its \href{https://github.com/aoles/EBImage}{github page}).
Internally the function EBImage::watershed is called.
\item \strong{Marker controlled watershed} is based on the \code{imager} package. Internally the
function \link[imager:watershed]{imager::watershed} is called using the tree tops as priority map.
}
}
\details{
Because this algorithm works on a CHM only there is no actual need of a point cloud. Sometime the
user do not even have the point cloud that generated the CHM. \code{lidR} is a point cloud oriented
library this is why this algorithm must be used in \link{lastrees} to reafect the result into the point
cloud. However the user can use this function alone like that:
\preformatted{
 chm = raster("file/to/a/chm/")
 ttops = tree_detection(chm, lmf(3))
 crowns = watershed(chm)()
}
}
\examples{
LASfile <- system.file("extdata", "MixedConifer.laz", package="lidR")
las = readLAS(LASfile, select = "xyz", filter = "-drop_z_below 0")
col = pastel.colors(250)

chm = grid_canopy(las, res = 0.5, p2r(0.3))
kernel = matrix(1,3,3)
chm = raster::focal(chm, w = kernel, fun = mean, na.rm = TRUE)

ttops = tree_detection(chm, lmf(4, 2))
lastrees(las, mcwatershed(chm, ttops))

plot(las, color = "treeID", colorPalette = col)
rgl::spheres3d(ttops@coords[,1], ttops@coords[,2], ttops@data$Z, col = "red", size = 5, add = TRUE)
}
\seealso{
Other individual tree segmentation algorithms: \code{\link{dalponte2016}},
  \code{\link{hamraz2016}}, \code{\link{li2012}},
  \code{\link{ptrees}}, \code{\link{silva2016}}

Other raster based tree segmentation algorithms: \code{\link{dalponte2016}},
  \code{\link{silva2016}}
}
\concept{individual tree segmentation algorithms}
\concept{raster based tree segmentation algorithms}
